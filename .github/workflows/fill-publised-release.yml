name: Fill last published release
on: 
  workflow_dispatch:
  push:
    branches:
      - config/actions
defaults:
  run:
    shell: bash
env:
  TOKEN: ${{ secrets.GITHUB_TOKEN }}
jobs:
  create-url-api:
    name: Create a URL to fetch data
    runs-on: ubuntu-latest
    env:
      PROTOCOL_AND_DOMAIN: ${{ github.api_url }}
      OWNER_REPO: ${{ github.repository }}
      OWNER: ${{ github.repository_owner }}
    outputs:
      URL: ${{ steps.creation.outputs.URL }}
    steps:
      - id: creation
        name: Creating URL formatting GITHUB_REPOSITORY
        run: |
          REPO=$(echo "$OWNER_REPO" | sed -E "s/.+\///gi")  
          echo "URL=$PROTOCOL_AND_DOMAIN/repos/$OWNER/$REPO" >> "$GITHUB_OUTPUT"
  get-latest-tag:
    name: Get latest tag
    runs-on: ubuntu-latest
    needs: [create-url-api]
    steps:
      - id: fetching-tags
        env:
          API_URL: ${{ needs.create-url-api.outputs.URL }}
        name: Fetching Tags
        run: |
          REQUEST="$(curl -fSsL --request GET --header "Accept: application/vnd.github+json" --header "Authorization: Bearer $TOKEN" --url "$API_URL/git/refs/tags")"
          echo "ALL_TAGS=$REQUEST" >> "$GITHUB_OUTPUT"

      - id: get-refs
        env:
          ALL_TAGS: ${{ steps.fetching-tags.outputs.ALL_TAGS }}
        name: Get refs
        run: echo "REFS_TAGS=$(echo $ALL_TAGS | jq "$[].ref")" >> "$GITHUB_OUTPUT"

      - id: get-latest-ref
        env:
          REFS_TAGS: ${{ steps.get-refs.outputs.REFS_TAGS }}
        name: Get latest ref
        run: echo "LATEST_REF=$(echo $REFS_TAGS | tail -n 1)" >> "$GITHUB_OUTPUT"

      - name: Format lastest and output tag name
        env:
          LATEST_REF: ${{ steps.get-latest-ref.outputs.LATEST_REF }}
        run: echo "LATEST_TAG=$(echo $LATEST_REF | sed -E "s/.+\///gi")" >> "$GITHUB_OUTPUT"

  generate-release-note:
    name: Generate a release notes
    runs-on: ubuntu-latest
    needs: [create-url-api, get-latest-tag]
    env:
      API_URL: ${{ needs.create-url-api.outputs.URL }}
      LATEST_TAG: ${{ needs.create-url-api.outputs.LATEST_TAG }}
    steps:
      - name: Mount JSON data
        run: echo "JSON_DATA='{ \"tag_name\":\"$LATEST_TAG\" }'" >> "$GITHUB_OUTPUT"
      - name: Generate a release
        run: curl -L \
            --request POST \
            --url "$API_URL/releases/generate-notes" \
            --header "Accept:application/vnd.github+json" \
            --header "Authorization:Bearer $TOKEN" \
            --data '${{ steps.generate-release-note.JSON_DATA }}' 
