name: Fill last published release
on: 
  workflow_dispatch:
  push:
    branches:
      - config/actions
defaults:
  run:
    shell: bash
env:
  TOKEN: ${{ secrets.GITHUB_TOKEN }}
jobs:
  create-url-api:
    name: Create a URL to fetch data
    runs-on: ubuntu-latest
    env:
      PROTOCOL_AND_DOMAIN: ${{ github.api_url }}
      OWNER_REPO: ${{ github.repository }}
      OWNER: ${{ github.repository_owner }}
    outputs:
      URL: ${{ steps.creation.outputs.URL }}
    steps:
      - id: creation
        name: Creating URL formatting GITHUB_REPOSITORY
        run: |
          REPO=$(echo "$OWNER_REPO" | sed -E "s/.+\///gi")  
          echo "URL=$PROTOCOL_AND_DOMAIN/repos/$OWNER/$REPO" >> "$GITHUB_OUTPUT"
  get-available-tags:
    name: Get latest tag and latest release tag
    runs-on: ubuntu-latest
    needs: [create-url-api]
    steps:
      - id: get-latest-tag
        name: List TAGS and get latest tag with TAIL
        env:
          PATH_REPO: ${{ github.action_ref }}
        run: |
          ls -lah
          echo "$PATH_REPO"
          git --version
          echo "${{ github }}"

          echo "LATEST_TAG=$(git tag | tail -n 1)" >> "$GITHUB_OUTPUT"
        
      - id: get-latest-release-tag
        name: Get last release linked tag
        env:
          API_URL: ${{ needs.create-url-api.outputs.URL }}
        run: |
          GET_RELEASE_TAG=$(curl -fSsL --request GET --header "Accept: application/vnd.github+json" --header "Authorization: Bearer $TOKEN" --url "$API_URL/releases?page=1")
          echo "$GET_RELEASE_TAG"
          echo "passou daqui"
          FORMATED_RELEASE_TAG=$(echo "$GET_RELEASE_TAG" | jq ".[].tag_name" | head -n 1 | sed -E "s/\"//gi")
          echo "LATEST_RELEASE_TAG=$FORMATED_RELEASE_TAG" >> "$GITHUB_OUTPUT"

  generate-release-note:
    name: Generate a release notes
    runs-on: ubuntu-latest
    needs: [create-url-api, get-available-tags]
    env:
      API_URL: ${{ needs.create-url-api.outputs.URL }}
      LATEST_RELEASE_TAG: ${{ needs.get-available-tags.outputs.LATEST_RELEASE_TAG }}
      LATEST_TAG: ${{ needs.get-available-tags.outputs.LATEST_TAG }}
    steps:
      - id: generate-json-data
        name: Mount JSON data
        run: echo "JSON_DATA='{ \"tag_name\":\"$LATEST_TAG\", \"previous_tag_name\":\"$LATEST_RELEASE_TAG\" }'" >> "$GITHUB_OUTPUT"

      - name: Generate a release
        env:
          JSON_DATA: ${{ steps.generate-json-data.outputs.JSON_DATA }}
        run: |
            curl -fsSL \
            --request POST \
            --url "$API_URL/releases/generate-notes" \
            --header "Accept: application/vnd.github+json" \
            --header "Authorization: Bearer $TOKEN" \
            --data '$JSON_DATA'
