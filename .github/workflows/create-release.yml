name: Create a RELEASE
on: 
  workflow_dispatch:

defaults:
  run:
    shell: bash

jobs:
  get-repo-features:
    name: repository files access to get values
    runs-on: ubuntu-latest
    outputs:
      LASTEST_TAG: ${{ steps.get-latest-tag-name-release.outputs.LATEST_TAG }}
      RELEASE_EXEMPLE: ${{ steps.get-markdown-template.outputs.RELEASE_EXEMPLE }}
    steps:
      - name: repo access
        uses: actions/checkout@v4

      - id: get-latest-tag-name-release
        name: get latest tag name release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run:
          LATEST_TAG=$(gh release list -O desc --json tagName --jq ".[].tagName" -L 1)
          echo "LATEST_TAG=$LAST_RELEASE" >> "$GITHUB_OUTPUT"

      - id: get-markdown-template
        name: get markdown from git project
        run:
          echo 'RELEASE_EXEMPLE="$(cat .github/release.md)"' >> "$GITHUB_OUTPUT"

  create-release:
    name: generate release
    runs-on: ubuntu-latest
    needs: [get-repo-features]
    env:
      RELEASE_EXEMPLE: ${{ needs.get-repo-features.outputs.RELEASE_TAG}}
      LATEST_TAG: ${{ needs.get-repo-features.outputs.LATEST_TAG }}
    steps:
      - name: show envs
        run: |
          echo "$RELEASE_EXEMPLE"
          echo "$LATEST_TAG"

      - id: create-template
        name: Create a template
        run: |
          TEMPLATE=$(echo "$RELEASE_EXEMPLE" | sed -E "s/@\{(.+)\}\s(.+)/git log --format='\\2' "$LATEST_TAG"...HEAD | grep -Pi '\\1'/gie")
          echo "TEMPLATE=$TEMPLATE" >> "$GITHUB_OUTPUT"

      - name: Create a release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: echo ${{ steps.create-template.outputs.TEMPLATE }} | gh create release v1.0.0 -F - 
